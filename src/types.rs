use std::num::NonZeroU16;

#[derive(Debug, Clone, Copy)]
pub enum Hand {
    Main,
    Secondary,
}
#[derive(Debug, Clone, Copy)]
pub enum BlockFace {
    Top,
    Bottom,
    North,
    South,
    East,
    West,
}

// Right now I'm representing blockstates here, I think.
// that may or may not be problematic.
#[derive(Debug, Clone, Copy)]
pub struct Block(NonZeroU16);
macro_rules! selfnew {
    ($n:literal) => {match Self::new(7) {
        Some(v) => v,
        None => panic!()
    }};
}
impl Block {
    pub const ANDESITE: Self = selfnew!(7);
    pub const fn new(net_id: u16) -> Option<Self> {
        match NonZeroU16::new(net_id) {
            Some(nz) => Some(Self(nz)),
            None => None
        }
    }
    pub fn net_id(&self) -> u16 {
        self.0.get()
    }
}
#[derive(Debug, Clone, Copy)]
pub struct Item(NonZeroU16);
impl Item {
    pub fn new(net_id: u16) -> Option<Self> {
        NonZeroU16::new(net_id).filter(|v| v.get() < 1152).map(Self)
    }
    pub fn net_id(&self) -> u16 {
        self.0.get()
    }
    pub fn block(&self) -> Option<Block> {
        Block::new(Self::ITEM_TO_BLOCKSTATE_IDS[self.0.get() as usize])
    }
}
#[derive(Debug,Clone, Copy)]
pub struct V3<T> {
    pub x: T,
    pub y: T,
    pub z: T,
}
pub fn V3<T>(x: T, y: T, z: T) -> V3<T> {
    V3 { x, y, z }
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum GameMode {
    Survival, 
    Creative,
}
#[derive(Copy, Clone, PartialEq)]
pub struct Name(pub [u8; 16]);

impl Name {
    pub fn from_utf8(bytes: [u8; 16]) -> Self {
        Self(bytes)
    }
    pub fn len(&self) -> usize {
        self.0.iter().position(|b| *b == 0xFF).unwrap_or(16)
        
    }
    pub fn as_str(&self) -> &str {
        core::str::from_utf8(&self.0[..self.len()]).unwrap()
    }
}

pub struct Disconnection(pub(crate) ());
impl Disconnection {
    pub fn new() -> Self {
        Self(())
    }
}
impl Item {
    const COUNT: usize = 1152;
    /// ```java
    /// Object entries = (Object)Registry.ITEM.rawIdToEntry;
    /// short[] blockids = new short[entries.size()];
    /// for (int i = 0; i < blockids.length; i++) {
    ///     Object entry = (Object)entries.get(i).value;
    ///     if (entry instanceof BlockItem) {
    ///         blockids[i] = (short)Block.STATE_IDS.getRawId(entry.block.defaultState);
    ///     }
    /// }
    /// Arrays.toString(blockids)
    /// ```
    const ITEM_TO_BLOCKSTATE_IDS: [u16; Self::COUNT] = [0, 1, 2, 3, 4, 5, 6, 7, 19779, 19781, 20192, 18670, 18669, 19658, 9, 10, 11, 13, 19776, 19777, 16196, 16179, 14, 15, 16, 17, 18, 19, 20, 21, 16254, 16255, 22, 24, 26, 28, 30, 32, 39, 74, 107, 108, 109, 114, 115, 112, 113, 18912, 18913, 110, 111, 4193, 4195, 5841, 5842, 461, 462, 3608, 3609, 116, 7344, 17036, 8624, 21432, 21433, 21434, 18619, 18620, 1682, 18911, 1681, 3610, 17035, 18910, 18909, 18908, 18917, 18916, 18915, 18914, 19169, 19089, 19009, 18929, 19259, 19253, 19247, 19241, 19262, 19264, 19263, 19265, 19269, 19268, 19267, 19266, 19521, 19441, 19361, 19281, 19611, 19605, 19599, 19593, 118, 121, 124, 127, 130, 133, 136, 139, 141, 16185, 16168, 159, 144, 147, 150, 153, 156, 162, 16188, 16171, 186, 189, 192, 195, 198, 201, 204, 16194, 16177, 165, 168, 171, 174, 177, 180, 183, 16191, 16174, 233, 261, 289, 317, 345, 373, 401, 429, 457, 458, 459, 460, 18671, 463, 476, 477, 478, 1595, 1596, 1597, 19714, 19715, 1598, 1599, 10521, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1678, 1677, 19713, 1679, 1680, 16197, 16180, 16253, 16182, 16183, 16199, 16226, 4257, 10351, 19716, 19717, 19775, 19719, 19761, 10533, 9044, 9050, 9056, 9062, 9068, 9074, 9080, 16259, 16265, 9086, 9092, 9098, 9104, 9110, 9116, 9122, 9128, 9134, 9140, 9146, 9152, 9158, 9164, 8588, 8594, 8600, 9169, 9170, 9168, 9167, 1683, 1686, 1687, 1688, 1689, 9943, 10008, 10009, 10015, 10017, 10030, 2207, 2289, 3611, 3620, 3629, 3925, 3963, 4230, 4238, 4239, 4240, 4256, 4274, 4306, 9394, 9426, 9458, 9490, 9522, 9554, 16303, 16335, 4307, 4325, 4329, 4308, 4309, 4310, 4312, 4315, 21431, 4317, 4322, 4874, 4875, 4876, 4877, 4878, 4879, 21429, 4868, 4869, 4870, 4871, 4872, 4873, 21014, 21426, 20603, 21427, 21425, 21447, 4880, 4944, 5008, 5103, 5107, 5141, 5142, 5198, 5326, 5370, 5450, 5530, 5600, 5601, 5602, 18311, 18310, 5634, 5646, 18769, 18897, 18899, 18907, 5719, 5741, 5745, 10099, 5746, 5772, 5844, 5995, 2219, 6007, 6087, 6167, 8015, 8095, 8175, 16539, 16619, 6242, 6248, 6252, 6576, 11751, 12075, 12399, 12723, 13047, 13371, 13695, 14019, 14343, 14667, 14991, 15315, 15639, 17132, 17989, 17552, 19871, 20282, 21104, 20693, 7227, 7231, 7235, 7356, 7355, 18312, 7358, 7371, 7476, 7477, 7478, 7479, 7480, 7481, 7482, 7483, 7484, 7485, 7486, 7487, 7488, 7489, 7490, 7491, 8245, 8277, 8605, 8607, 8608, 8609, 8610, 8611, 8612, 8613, 8614, 8615, 8616, 8617, 8618, 8619, 8620, 8621, 8622, 8623, 8625, 10104, 8627, 8629, 8631, 8633, 8635, 8637, 4404, 4405, 4406, 4407, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419, 7523, 7555, 7587, 7619, 7651, 7683, 7715, 7747, 7779, 7811, 7843, 7875, 7907, 7939, 7971, 8003, 8342, 8343, 8344, 8356, 8436, 8516, 8603, 8958, 8959, 8960, 8972, 10112, 10124, 10134, 10135, 16181, 10136, 10138, 10140, 10157, 10163, 10169, 10175, 10181, 10187, 10193, 10199, 10205, 10211, 10217, 10223, 10229, 10235, 10241, 10247, 10253, 10255, 10259, 10263, 10267, 10271, 10275, 10279, 10283, 10287, 10291, 10295, 10299, 10303, 10307, 10311, 10315, 10319, 10320, 10321, 10322, 10323, 10324, 10325, 10326, 10327, 10328, 10329, 10330, 10331, 10332, 10333, 10334, 10335, 10336, 10337, 10338, 10339, 10340, 10341, 10342, 10343, 10344, 10345, 10346, 10347, 10348, 10349, 10350, 10379, 10391, 10392, 10393, 10394, 10395, 10396, 10397, 10398, 10399, 10400, 10411, 10413, 10415, 10417, 10419, 10403, 10405, 10407, 10409, 10401, 10431, 10433, 10435, 10437, 10439, 10421, 10423, 10425, 10427, 10429, 10529, 10530, 10561, 10641, 10721, 10801, 10881, 10961, 11041, 11121, 11201, 11281, 11361, 11441, 11521, 11601, 19793, 20204, 21026, 20615, 11673, 11679, 11685, 11691, 11697, 11703, 11709, 11715, 11721, 11727, 11733, 11739, 11745, 19865, 20276, 21098, 20687, 15991, 3472, 4196, 7343, 4343, 7296, 1608, 1589, 8244, 17033, 10146, 7345, 465, 7465, 16041, 16969, 4097, 19633, 7327, 18674, 5860, 7240, 1685, 5748, 480, 4215, 17971, 6948, 6972, 6996, 7020, 7044, 7068, 7092, 16697, 16721, 4113, 17961, 7263, 7279, 4179, 4181, 4183, 4185, 4187, 4189, 4191, 16269, 16271, 4125, 3871, 9566, 9630, 9694, 9758, 9822, 9886, 16747, 16811, 8293, 4435, 4499, 4563, 4627, 4691, 4755, 4819, 16351, 16415, 5334, 9178, 9210, 9242, 9274, 9306, 9338, 16471, 16503, 1548, 1572, 3933, 7453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16945, 16958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5994, 0, 0, 3612, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3637, 3669, 3701, 3765, 3733, 3797, 3829, 16865, 16897, 0, 0, 0, 18672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10378, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5749, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4333, 1282, 1298, 1314, 1330, 1346, 1362, 1378, 1394, 1410, 1426, 1442, 1458, 1474, 1490, 1506, 1522, 0, 0, 0, 0, 0, 5151, 5159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5715, 0, 0, 0, 0, 0, 0, 5727, 5728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6897, 6923, 6931, 0, 0, 0, 0, 7107, 7127, 7167, 7147, 7187, 7207, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8638, 8654, 8670, 8686, 8702, 8718, 8734, 8750, 8766, 8782, 8798, 8814, 8830, 8846, 8862, 8878, 0, 0, 0, 0, 10100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15992, 0, 0, 0, 0, 0, 0, 0, 16960, 15997, 16009, 16017, 16024, 16025, 16030, 16054, 16055, 16060, 16094, 16098, 16163, 19660, 16102, 16134, 16198, 0, 16985, 17009, 0, 17034, 17047, 17037, 17048, 17456, 17060, 17873, 17459, 17957, 17885, 17462, 17460, 17466, 17480, 17461, 17038, 18316, 18332, 18348, 18364, 18380, 18396, 18412, 18428, 18444, 18460, 18476, 18492, 18508, 18524, 18540, 18556, 18572, 18666, 18654, 18642, 18630, 19643, 21438, 21441, 21444, 21446, 0];
}

impl core::fmt::Debug for Name {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.as_str().fmt(f)
    }
}
